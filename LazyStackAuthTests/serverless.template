AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  HttpApiSecure:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Dev
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
              - Ref: UserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer
      CorsConfiguration:
        AllowOrigins:
          - https://*
        AllowHeaders:
          - Authorization
          - "*"
        AllowMethods:
          - GET
          - HEAD
          - PUT
          - OPTIONS
          - POST
          - DELETE
        ExposeHeaders:
          - Date
          - x-api-id
        MaxAge: 600
        AllowCredentials: false

  ApiSecure:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiSecure
      StageName: Dev
      Auth:
        DefaultAuthorizer: AWS_IAM
        AddDefaultAuthorizerToCorsPreflight: False
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,HEAD,PUT,OPTIONS,POST,DELETE'"
        AllowOrigin: "'*'"
        AllowHeaders: "'Authorization,Accept,Content-Type,LzIdentity,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-Trace-Id,x-amz-apigw-id,x-amzn-RequestId'"
        MaxAge: "'600'"
        AllowCredentials: false


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
      - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AWS::StackName}-IdentityPool
      AllowUnauthenticatedIdentities: false
      AllowClassicFlow: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt: UserPool.ProviderName
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: AuthRole.Arn
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-AuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action:
          - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud':
                Ref: IdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-AuthPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'execute-api:Invoke'
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiSecure}/*

  HttpApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HttpApiLambda
      CodeUri: ../LazyStackAuthTestsLambdaHttpApi/bin/Debug/netcoreapp3.1
      Handler: LazyStackAuthTestsLambdaHttpApi::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: HttpApiLambda
      Runtime: dotnetcore3.1
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      Events:
        GetUserIdHttpApi:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /httpapi/user
            Method: GET

  ApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ApiLambda
      CodeUri: ../LazyStackAuthTestsLambdaApi/bin/Debug/netcoreapp3.1
      Handler: LazyStackAuthTestsLambdaApi::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: ApiLambda
      Runtime: dotnetcore3.1
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      Events:
        GetUserApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiSecure
            Path: /api/user
            Method: GET
            Auth:
              InvokeRole: NONE
        GetJsonTestApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiSecure
            Path: /api/testjson
            Method: GET
            Auth:
              InvokeRole: NONE
