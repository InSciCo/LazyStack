using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;



namespace LazyStackAuthTestsController
{
    using System = global::System;

    public interface ITestsController
    {
        public Task<ActionResult<string>> GetUserIdApiAsync();

        public Task<ActionResult<SampleData>> GetTestJsonApiAsync();
        
        public Task<ActionResult<string>> GetUserIdHttpApiAsync();

        public Microsoft.AspNetCore.Mvc.Controller LzController { get; set; }
        
        public string LzUserId { get; set; }
        
        public void LzGetUserId()
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            Microsoft.Extensions.Primitives.StringValues header;
            var foundHeader = LzController.Request.Headers.TryGetValue("Authorization", out header);
            if (!foundHeader || header[0].ToString().StartsWith("AWS4-HMAC-SHA256 Credential="))
                foundHeader = LzController.Request.Headers.TryGetValue("LzIdentity", out header);
            if (foundHeader)
            {
                if (handler.CanReadToken(header))
                {
                    var jwtToken = handler.ReadJwtToken(header);
                    var claim = jwtToken?.Claims.Where(x => x.Type.Equals("sub")).FirstOrDefault();
                    LzUserId = claim?.Value; 
                }
            }
        }
    }



    /// <summary>
    /// This class follows the sematics of the Controller classes generated by LazyStack MDD
    /// The syntax is different as we do not explictly prefix each class with the full 
    /// library namespace as NSwag does. This is easier to read but generates the same code.
    /// A programmer would not normally modify a class like this - it would be generated by LazyStack.
    /// </summary>
    public class TestsController : Controller
    {
        private ITestsController _implementation;

        public TestsController(ITestsController implementation)
        {
            _implementation = implementation;
            _implementation.LzController = this;
        }

        [HttpGet, Route("api/user")]
        public Task<ActionResult<string>> GetUserIdApi()
        {
            _implementation.LzGetUserId();
            return _implementation.GetUserIdApiAsync();
        }


        [HttpGet, Route("api/testjson")]
        public Task<ActionResult<SampleData>> GetTestJsonApi()
        {
            _implementation.LzGetUserId();
            return _implementation.GetTestJsonApiAsync();
        }


        [HttpGet, Route("httpapi/user")]
        public Task<ActionResult<string>> GetUserIdHttpApi()
        {
            _implementation.LzGetUserId();
            return _implementation.GetUserIdHttpApiAsync();
        }



    }

    /// <summary>
    ///  This class provides the implementation for the generated controller.
    ///  The GetUserIdApi() and GetUserIdHttpApi() methods exercise the 
    ///  LzGetUserId() method defined in the ITestsController interface.
    ///  The point is to make sure that the header assignments made by 
    ///  the client are correct for processing by the Lambda.
    ///  Normally, this class would be defined in a separate project. There
    ///  is no point to doing that for this simple test suite.
    /// </summary>
    public class TestsControllerImpl : ITestsController
    {

        public Controller LzController { get; set; }
        public string LzUserId { get; set; }

        // This method will be called by the AWS::Serverless::Api "SecureApi" Gateway event GetUserIdApi
        // Refer to the serverless.template file in the LazyStackAuthTests project
        public async Task<ActionResult<string>> GetUserIdApiAsync()
        {
            await Task.Delay(0);
            return LzUserId;
        }

        public async Task<ActionResult<SampleData>> GetTestJsonApiAsync()
        {
            await Task.Delay(0);
            return new SampleData() { Field1 = "Field1 is yada" };
        }

        // This method will be called by the AWS::Serverless::ApiGateway "SecureHttpApi" event GetUserIdHttpApi
        // Refer to the serverless.template file in the LazyStackAuthTests project
        public async Task<ActionResult<string>> GetUserIdHttpApiAsync()
        {
            await Task.Delay(0);
            return LzUserId;
        }


    }

}
