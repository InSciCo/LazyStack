//----------------------
// This class contains a ripped copy of the schema generated by NSwag.
// We duplicate it here to avoid uwanted dependency on any specific application. 
// Note that small edits were made to remove nullability warnings.
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'.Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ..."
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"


namespace LazyStackNotificationsSchema.Models;

using System = System;

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
public partial class Notification : System.ComponentModel.INotifyPropertyChanged
{
    private string _id = string.Empty;
    private string _topicId = string.Empty;
    private string _userId = string.Empty;
    private string _payloadParentId = string.Empty;
    private string _payloadId = string.Empty;
    private string _payloadType = string.Empty;
    private string _payload = string.Empty;
    private string _payloadAction = string.Empty;
    private long _createdAt;
    private long _ttl;

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public string Id
    {
        get { return _id; }

        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("topicId", Required = Newtonsoft.Json.Required.AllowNull)]
    public string TopicId
    {
        get { return _topicId; }

        set
        {
            if (_topicId != value)
            {
                _topicId = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.AllowNull)]
    public string UserId
    {
        get { return _userId; }

        set
        {
            if (_userId != value)
            {
                _userId = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("payloadParentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PayloadParentId
    {
        get { return _payloadParentId; }

        set
        {
            if (_payloadParentId != value)
            {
                _payloadParentId = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("payloadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PayloadId
    {
        get { return _payloadId; }

        set
        {
            if (_payloadId != value)
            {
                _payloadId = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("payloadType", Required = Newtonsoft.Json.Required.AllowNull)]
    public string PayloadType
    {
        get { return _payloadType; }

        set
        {
            if (_payloadType != value)
            {
                _payloadType = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Payload
    {
        get { return _payload; }

        set
        {
            if (_payload != value)
            {
                _payload = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("payloadAction", Required = Newtonsoft.Json.Required.AllowNull)]
    public string PayloadAction
    {
        get { return _payloadAction; }

        set
        {
            if (_payloadAction != value)
            {
                _payloadAction = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long CreatedAt
    {
        get { return _createdAt; }

        set
        {
            if (_createdAt != value)
            {
                _createdAt = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("ttl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long Ttl
    {
        get { return _ttl; }

        set
        {
            if (_ttl != value)
            {
                _ttl = value;
                RaisePropertyChanged();
            }
        }
    }

    private IDictionary<string, object>? _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

    public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

    protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}
#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
