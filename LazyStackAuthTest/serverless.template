AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Description: API Gateway Stage name
    Default: Dev

Resources:

  HttpApiUnsecure:
    Type: AWS::Serverless::HttpApi
    Properties:
      # Note: HttpApi does not have a Name property - Stupid beyond belief
      StageName:
        Ref: StageName

  HttpApiSecure:
    Type: AWS::Serverless::HttpApi
    Properties:
      # Note: HttpApi does not have a Name property - Stupid beyond belief
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience: # careful here, this must be a scalar node or the deploy fails silently with no routes!
              - Ref: UserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer
      StageName:
        Ref: StageName
  
  ApiUnsecure:
    Type: AWS::Serverless::Api
    Properties:
      Name: 
        Fn::Sub: ${AWS::StackName}-ApiUnsecure
      StageName:
        Ref: StageName
      EndpointConfiguration: REGIONAL
      TracingEnabled: true

  ApiSecure:
    Type: AWS::Serverless::Api
    Properties:
      Name: 
        Fn::Sub: ${AWS::StackName}-ApiSecure
      Auth:
        DefaultAuthorizer: AWS_IAM
      StageName:
        Ref: StageName
      EndpointConfiguration: REGIONAL
      TracingEnabled: true            

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
      - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AWS::StackName}-IdentityPool
      AllowUnauthenticatedIdentities: false
      AllowClassicFlow: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt: UserPool.ProviderName

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: AuthRole.Arn

  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-AuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action:
          - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud':
                Ref: IdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-AuthPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'mobileanalytics:PutEvents'
            - 'cognito-sync:*'
            - 'cognito-identity:*'
            Resource: '*'
          - Effect: 'Allow'
            Action:
            - 'execute-api:Invoke'
            Resource: 'arn:aws:execute-api:us-east-1:*:*'

  LazyStackAuthTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        def handler(event, context):
            return {'body': 'Hello World!', 'statusCode': 200}
      Handler: index.handler
      Runtime: python3.7
      Timeout: 30
      MemorySize: 128
      Events:
        GetTestHttpApiUnsecure:
          Type: HttpApi
          Properties:
            Path: /test
            Method: GET
            ApiId: 
              Ref: HttpApiUnsecure

        GetTestHttpApiSecure:
          Type: HttpApi
          Properties:
            Path: /test
            Method: GET
            ApiId: 
              Ref: HttpApiSecure    

        GetTestApiUnsecure:
          Type: Api
          Properties:
            Path: /test
            Method: GET
            RestApiId: 
              Ref: ApiUnsecure
            Auth:
              InvokeRole: NONE

        GetTestApiSecure:
          Type: Api
          Properties:
            Path: /test
            Method: GET
            RestApiId: 
              Ref: ApiSecure
            Auth:
              InvokeRole: NONE

    MetaData:
      ApiEventsGeneration: true
